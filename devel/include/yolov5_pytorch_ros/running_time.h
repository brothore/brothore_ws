// Generated by gencpp from file yolov5_pytorch_ros/running_time.msg
// DO NOT EDIT!


#ifndef YOLOV5_PYTORCH_ROS_MESSAGE_RUNNING_TIME_H
#define YOLOV5_PYTORCH_ROS_MESSAGE_RUNNING_TIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov5_pytorch_ros
{
template <class ContainerAllocator>
struct running_time_
{
  typedef running_time_<ContainerAllocator> Type;

  running_time_()
    : time0_pub(0.0)
    , time0_sub(0.0)
    , time1_pub(0.0)
    , time1_sub(0.0)
    , time2_pub(0.0)
    , time2_sub(0.0)  {
    }
  running_time_(const ContainerAllocator& _alloc)
    : time0_pub(0.0)
    , time0_sub(0.0)
    , time1_pub(0.0)
    , time1_sub(0.0)
    , time2_pub(0.0)
    , time2_sub(0.0)  {
  (void)_alloc;
    }



   typedef double _time0_pub_type;
  _time0_pub_type time0_pub;

   typedef double _time0_sub_type;
  _time0_sub_type time0_sub;

   typedef double _time1_pub_type;
  _time1_pub_type time1_pub;

   typedef double _time1_sub_type;
  _time1_sub_type time1_sub;

   typedef double _time2_pub_type;
  _time2_pub_type time2_pub;

   typedef double _time2_sub_type;
  _time2_sub_type time2_sub;





  typedef boost::shared_ptr< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> const> ConstPtr;

}; // struct running_time_

typedef ::yolov5_pytorch_ros::running_time_<std::allocator<void> > running_time;

typedef boost::shared_ptr< ::yolov5_pytorch_ros::running_time > running_timePtr;
typedef boost::shared_ptr< ::yolov5_pytorch_ros::running_time const> running_timeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov5_pytorch_ros::running_time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov5_pytorch_ros::running_time_<ContainerAllocator1> & lhs, const ::yolov5_pytorch_ros::running_time_<ContainerAllocator2> & rhs)
{
  return lhs.time0_pub == rhs.time0_pub &&
    lhs.time0_sub == rhs.time0_sub &&
    lhs.time1_pub == rhs.time1_pub &&
    lhs.time1_sub == rhs.time1_sub &&
    lhs.time2_pub == rhs.time2_pub &&
    lhs.time2_sub == rhs.time2_sub;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov5_pytorch_ros::running_time_<ContainerAllocator1> & lhs, const ::yolov5_pytorch_ros::running_time_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov5_pytorch_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fba7101da493706fc2932a90aa6f2991";
  }

  static const char* value(const ::yolov5_pytorch_ros::running_time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfba7101da493706fULL;
  static const uint64_t static_value2 = 0xc2932a90aa6f2991ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov5_pytorch_ros/running_time";
  }

  static const char* value(const ::yolov5_pytorch_ros::running_time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time0_pub\n"
"float64 time0_sub\n"
"float64 time1_pub\n"
"float64 time1_sub\n"
"float64 time2_pub\n"
"float64 time2_sub\n"
"\n"
;
  }

  static const char* value(const ::yolov5_pytorch_ros::running_time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time0_pub);
      stream.next(m.time0_sub);
      stream.next(m.time1_pub);
      stream.next(m.time1_sub);
      stream.next(m.time2_pub);
      stream.next(m.time2_sub);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct running_time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov5_pytorch_ros::running_time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov5_pytorch_ros::running_time_<ContainerAllocator>& v)
  {
    s << indent << "time0_pub: ";
    Printer<double>::stream(s, indent + "  ", v.time0_pub);
    s << indent << "time0_sub: ";
    Printer<double>::stream(s, indent + "  ", v.time0_sub);
    s << indent << "time1_pub: ";
    Printer<double>::stream(s, indent + "  ", v.time1_pub);
    s << indent << "time1_sub: ";
    Printer<double>::stream(s, indent + "  ", v.time1_sub);
    s << indent << "time2_pub: ";
    Printer<double>::stream(s, indent + "  ", v.time2_pub);
    s << indent << "time2_sub: ";
    Printer<double>::stream(s, indent + "  ", v.time2_sub);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV5_PYTORCH_ROS_MESSAGE_RUNNING_TIME_H

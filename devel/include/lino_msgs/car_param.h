// Generated by gencpp from file lino_msgs/car_param.msg
// DO NOT EDIT!


#ifndef LINO_MSGS_MESSAGE_CAR_PARAM_H
#define LINO_MSGS_MESSAGE_CAR_PARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lino_msgs
{
template <class ContainerAllocator>
struct car_param_
{
  typedef car_param_<ContainerAllocator> Type;

  car_param_()
    : R_wheel(0.0)
    , W_car(0.0)
    , L_car(0.0)  {
    }
  car_param_(const ContainerAllocator& _alloc)
    : R_wheel(0.0)
    , W_car(0.0)
    , L_car(0.0)  {
  (void)_alloc;
    }



   typedef float _R_wheel_type;
  _R_wheel_type R_wheel;

   typedef float _W_car_type;
  _W_car_type W_car;

   typedef float _L_car_type;
  _L_car_type L_car;





  typedef boost::shared_ptr< ::lino_msgs::car_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lino_msgs::car_param_<ContainerAllocator> const> ConstPtr;

}; // struct car_param_

typedef ::lino_msgs::car_param_<std::allocator<void> > car_param;

typedef boost::shared_ptr< ::lino_msgs::car_param > car_paramPtr;
typedef boost::shared_ptr< ::lino_msgs::car_param const> car_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lino_msgs::car_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lino_msgs::car_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lino_msgs::car_param_<ContainerAllocator1> & lhs, const ::lino_msgs::car_param_<ContainerAllocator2> & rhs)
{
  return lhs.R_wheel == rhs.R_wheel &&
    lhs.W_car == rhs.W_car &&
    lhs.L_car == rhs.L_car;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lino_msgs::car_param_<ContainerAllocator1> & lhs, const ::lino_msgs::car_param_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lino_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::car_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::car_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::car_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::car_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::car_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::car_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lino_msgs::car_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "762b33a7ff469985517664c4a1eb5a3a";
  }

  static const char* value(const ::lino_msgs::car_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x762b33a7ff469985ULL;
  static const uint64_t static_value2 = 0x517664c4a1eb5a3aULL;
};

template<class ContainerAllocator>
struct DataType< ::lino_msgs::car_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lino_msgs/car_param";
  }

  static const char* value(const ::lino_msgs::car_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lino_msgs::car_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 R_wheel\n"
"float32 W_car\n"
"float32 L_car\n"
;
  }

  static const char* value(const ::lino_msgs::car_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lino_msgs::car_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.R_wheel);
      stream.next(m.W_car);
      stream.next(m.L_car);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lino_msgs::car_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lino_msgs::car_param_<ContainerAllocator>& v)
  {
    s << indent << "R_wheel: ";
    Printer<float>::stream(s, indent + "  ", v.R_wheel);
    s << indent << "W_car: ";
    Printer<float>::stream(s, indent + "  ", v.W_car);
    s << indent << "L_car: ";
    Printer<float>::stream(s, indent + "  ", v.L_car);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINO_MSGS_MESSAGE_CAR_PARAM_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lino_msgs/wheel_speed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class wheel_speed(genpy.Message):
  _md5sum = "dcc44326156228f397c3cb547e1a862c"
  _type = "lino_msgs/wheel_speed"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 L1
float32 L2
float32 L3
float32 R1
float32 R2
float32 R3
float32 L_SPEED
float32 R_SPEED
float32 L1_PID
float32 L2_PID
float32 L3_PID
float32 R1_PID
float32 R2_PID
float32 R3_PID
"""
  __slots__ = ['L1','L2','L3','R1','R2','R3','L_SPEED','R_SPEED','L1_PID','L2_PID','L3_PID','R1_PID','R2_PID','R3_PID']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       L1,L2,L3,R1,R2,R3,L_SPEED,R_SPEED,L1_PID,L2_PID,L3_PID,R1_PID,R2_PID,R3_PID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wheel_speed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.L1 is None:
        self.L1 = 0.
      if self.L2 is None:
        self.L2 = 0.
      if self.L3 is None:
        self.L3 = 0.
      if self.R1 is None:
        self.R1 = 0.
      if self.R2 is None:
        self.R2 = 0.
      if self.R3 is None:
        self.R3 = 0.
      if self.L_SPEED is None:
        self.L_SPEED = 0.
      if self.R_SPEED is None:
        self.R_SPEED = 0.
      if self.L1_PID is None:
        self.L1_PID = 0.
      if self.L2_PID is None:
        self.L2_PID = 0.
      if self.L3_PID is None:
        self.L3_PID = 0.
      if self.R1_PID is None:
        self.R1_PID = 0.
      if self.R2_PID is None:
        self.R2_PID = 0.
      if self.R3_PID is None:
        self.R3_PID = 0.
    else:
      self.L1 = 0.
      self.L2 = 0.
      self.L3 = 0.
      self.R1 = 0.
      self.R2 = 0.
      self.R3 = 0.
      self.L_SPEED = 0.
      self.R_SPEED = 0.
      self.L1_PID = 0.
      self.L2_PID = 0.
      self.L3_PID = 0.
      self.R1_PID = 0.
      self.R2_PID = 0.
      self.R3_PID = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.L1, _x.L2, _x.L3, _x.R1, _x.R2, _x.R3, _x.L_SPEED, _x.R_SPEED, _x.L1_PID, _x.L2_PID, _x.L3_PID, _x.R1_PID, _x.R2_PID, _x.R3_PID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.L1, _x.L2, _x.L3, _x.R1, _x.R2, _x.R3, _x.L_SPEED, _x.R_SPEED, _x.L1_PID, _x.L2_PID, _x.L3_PID, _x.R1_PID, _x.R2_PID, _x.R3_PID,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.L1, _x.L2, _x.L3, _x.R1, _x.R2, _x.R3, _x.L_SPEED, _x.R_SPEED, _x.L1_PID, _x.L2_PID, _x.L3_PID, _x.R1_PID, _x.R2_PID, _x.R3_PID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.L1, _x.L2, _x.L3, _x.R1, _x.R2, _x.R3, _x.L_SPEED, _x.R_SPEED, _x.L1_PID, _x.L2_PID, _x.L3_PID, _x.R1_PID, _x.R2_PID, _x.R3_PID,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
